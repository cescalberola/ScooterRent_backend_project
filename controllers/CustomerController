const { Customer, Token, Sequelize, Review } = require("../models/index.js");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const { jwt_secret } = require("../config/config.json")["development"];
const { Op } = Sequelize;

const CustomerController = {
  async create(req, res) {
    try {
      console.log("object");
      req.body.role = "customer";
      const password = bcrypt.hashSync(req.body.password, 10);
      const customer = await Customer.create({ ...req.body, password });
      res.status(201).send({ message: 'Customer created successfully', customer });
    } catch (err) {
      console.error(err);
      res.status(500).send(err);
    }
  },

  async getById(req, res) {
    try {
      const customer = await Customer.findByPk(req.params.id);
      res.send(customer);
    } catch (err) {
      console.error(err);
      res.status(500).send(err);
    }
  },

  async getAll(req, res) {
    try {
      const customers = await Customer.findAll({
        include: [Review],
      });
      res.send(customers);
    } catch (err) {
      console.log(err);
      res.status(500).send({
        message: "There was a problem finding customers",
      });
    }
  },

  async getOneByName(req, res) {
    try {
      const customer = await Customer.findOne({
        where: {
          FirstName: {
            [Op.like]: `%${req.params.name}%`
          }
        },
      });
      res.send(customer);
    } catch (err) {
      console.error(err);
      res.status(500).send(err);
    }
  },

  async delete(req, res) {
    try {
      await Customer.destroy({
        where: {
          id: req.params.id,
        }
      });
      await Review.destroy({
        where: {
          CustomerId: req.params.id
        }
      });
      res.send("The customer has been successfully deleted");
    } catch (err) {
      console.error(err);
      res.status(500).send(err);
    }
  },

  async update(req, res) {
    try {
      await Customer.update(req.body, {
        where: {
          id: req.params.id,
        },
      });
      res.send("Customer successfully updated");
    } catch (err) {
      console.error(err);
      res.status(500).send(err);
    }
  },

  async login(req, res) {
    try {
      const customer = await Customer.findOne({
        where: {
          email: req.body.email,
        },
      });

      if (!customer) {
        return res
          .status(400)
          .send({ message: "Incorrect username or password" });
      }

      const isMatch = bcrypt.compareSync(req.body.password, customer.password);

      if (!isMatch) {
        return res
          .status(400)
          .send({ message: "Incorrect username or password" });
      }

      const token = jwt.sign({ id: customer.id }, jwt_secret);
      await Token.create({ token, CustomerId: customer.id });
      res.send({ msg: `Welcome ${customer.FirstName}`, token, customer });
    } catch (err) {
      console.error(err);
      res.status(500).send(err);
    }
  },

  async logout(req, res) {
    try {
      await Token.destroy({
        where: {
          [Op.and]: [
            { CustomerId: req.customer.id },
            { token: req.headers.authorization },
          ],
        },
      });
      res.send({ message: "Successfully logged out" });
    } catch (err) {
      console.error(err);
      res.status(500).send({ message: "There was a problem trying to disconnect you" });
    }
  },
};

module.exports = CustomerController
