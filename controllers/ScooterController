const { Scooter, Customer, Review, Sequelize } = require("../models/index.js");
const { Op } = Sequelize;
const ScooterController = {
  async create(req, res) {
    console.log("object");
    try {
      const scooter = await Scooter.create(req.body);
      res.status(201).send({ message: "Scooter created successfully", scooter });
    } catch (err) {
      console.error(err);
      res.status(500).send(err);
    }
  },

  async getById(req, res) {
    try {
      const scooter = await Scooter.findByPk(req.params.id);
      res.send(scooter);
    } catch (err) {
      console.error(err);
      res.status(500).send(err);
    }
  },

  async getOneByName(req, res) {
    try {
      const scooter = await Scooter.findOne({
        where: {
          Brand: {
            [Op.like]: `%${req.params.name}%`,
          },
        },
      });
      res.send(scooter);
    } catch (err) {
      console.error(err);
      res.status(500).send(err);
    }
  },

  async getAll(req, res) {
    try {
      const scooters = await Scooter.findAll({
        include: [Customer, Review],
      });
      res.send(scooters);
    } catch (err) {
      console.log(err);
      res.status(500).send({
        message: "There was a problem to find",
      });
    }
  },

  async delete(req, res) {
    try {
      await Scooter.destroy({
        where: {
          id: req.params.id,
        },
      });
      res.send("The scooter has been successfully deleted");
    } catch (err) {
      console.error(err);
      res.status(500).send(err);
    }
  },

  async update(req, res) {
    try {
      await Scooter.update(req.body, {
        where: {
          id: req.params.id,
        },
      });
      res.send("Scooter successfully updated");
    } catch (err) {
      console.error(err);
      res.status(500).send(err);
    }
  },

  async sortByPrice(req, res) {
    try {
      const scooter = await Scooter.findAll({
        order: [["Price", "DESC"]],
      });
      res.send(scooter);
    } catch (error) {
      console.error(error);
      res.status(500).send("Unexpected error while trying to sort the Scooters");
    }
  },

  async getByPrice(req, res) {
    try {
      const scooter = await Scooter.findAll({
        where: {
          price: req.params.price,
        },
      });
      if (scooter.length < 1) {
       return res.status(404).send("Product with that price is not found");
      }
      res.send(scooter);
    } catch (error) {
      console.error(error);
      res.status(500).send({ message: "Error server", error });
    }
  },
};

module.exports = ScooterController
